package io.proj3ct.SpringDemoBot.service;

import io.proj3ct.SpringDemoBot.config.BotConfig;
import io.proj3ct.SpringDemoBot.model.User;
import io.proj3ct.SpringDemoBot.model.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Pair;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.*;


@Slf4j
@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Autowired
    private final UserRepository userRepository;

    final BotConfig config;

    private static final String HELP_TEXT = """
              –ü—Ä–∏–≤–µ—Ç! üåçüîé
                                                                                                      
              RoamAndHuntBot - –í–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –º–∏—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏! üè°‚ú®
              
              üîç *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*
              1. –ù–∞–∂–º–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö.
              2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä, –æ –∫–æ—Ç–æ—Ä—ã—Ö –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ "1" –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä –æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞.)
              3. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤—ã–±–æ—Ä.
              
              üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
              /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö;
              /delete - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏;
              /help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö.
              
              üîß *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
              - /addtype - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏;
              - /deletetype - —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã.
              
              –¢–µ–ø–µ—Ä—å –í—ã –≤ –∫—É—Ä—Å–µ! –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –∏—Å–∫–∞—Ç—å –í–∞—à –Ω–æ–≤—ã–π —É—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫! üåüüè†""";

    private static final String COMMAND_NOT_EXIST_TEXT = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤–≤–µ–¥–∏—Ç–µ /help.";
    private static final String SUBSCRIBE_TRUE_TEXT = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. ";
    private static final String SUBSCRIBE_FALSE_TEXT = "–ü–æ–Ω–∏–º–∞–µ–º –≤–∞—à –≤—ã–±–æ—Ä. –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –í—ã —Ä–µ—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ú—ã –±—É–¥–µ–º –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!";
    private static final String UNSUBSCRIBE_TRUE_TEXT = """
            –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞.
                        
            –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.
            –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏!""";
    private static final String UNSUBSCRIBE_FALSE_TEXT = """
            –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!
                        
            –í–∞—à –≤—ã–±–æ—Ä –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –Ω–∞—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å.
            """;

    private static final String SUBSCRIBE_QUESTION_TEXT = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?";
    private static final String UNSUBSCRIBE_QUESTION_TEXT = "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?";
    private static final String YES_BUTTON = "YES_BUTTON";
    private static final String NO_BUTTON = "NO_BUTTON";
    private static final String CHOOSE_ROOM_COUNT = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: ";
    private static final String ROOM_BUTTON = "ROOM_BUTTON_";
    private static final String TEXT_ADD_TYPE = "–ö–∞–∫–æ–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?";
    private static final String TEXT_ADD_TYPE_WRONG = """
            –ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /subscribe.\uD83C\uDFE0‚ú®
            
            –í —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addtype –∏–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é /removetype. \uD83E\uDD16\uD83C\uDFE0""";

    private static final String TEXT_REMOVE_TYPE = "–ö–∞–∫–æ–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å?";


    private static final String ERROR_TEXT = "Error occurred: ";
    private static final String USER_ALREADY_REGISTERED_TEXT = "–≠–π! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É –Ω–∞—Å. \uD83E\uDD16\uD83C\uDF1F";
    private static final String NOT_SUBSCRIBED_WANT_TO_UNSUBSCRIBE_TEXT = "–≠–π! –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. \uD83E\uDD16‚ùå";

    private static final String LINK_CONNECT_TO_CIAN = "https://kazan.cian.ru/cat.php?deal_type=rent&engine_version=2&offer_type=flat&region=4777&room1=1&room2=1&room3=1&room4=1&room5=1&room6=1&room9=1&sort=creation_date_desc&totime=-2&type=4";
    private static final String SELECTOR_DESCRIPTION = "span._93444fe79c--color_black_100--Ephi7";
    private static final String SELECTOR_LINK_TO_SEND = "a._93444fe79c--link--VtWj6";

    private Pair<String, String> checkCian() {

        try {
            Document doc = Jsoup.connect(LINK_CONNECT_TO_CIAN)
                    .ignoreContentType(true)
                    .userAgent("Mozilla/5.0 (Windows; U; Windows NT 6.1; rv:2.2) Gecko/20110201")
                    .referrer("http://www.google.com")
                    .timeout(12000)
                    .followRedirects(true)
                    .get();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            String description = Objects.requireNonNull(doc.selectFirst(SELECTOR_DESCRIPTION)).text();
            String link = Objects.requireNonNull(doc.selectFirst(SELECTOR_LINK_TO_SEND)).attr("href");

            log.info("–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {}", description);
            return Pair.of(description, link);

        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É CIAN: " + e.getMessage());
        }

        return null;
    }

    @Scheduled(fixedDelay = 10000)
    private void executeCian() {

        Pair<String, String> foundApartments = checkCian();

        if (Objects.nonNull(foundApartments)) {
            sendNotification(foundApartments);
        }
    }

    private void sendNotification(Pair<String, String> foundApartments) {

        List<User> subscribedUsers = (List<User>) userRepository.findAll();

        for (User user : subscribedUsers) {
            Long chatId = user.getChatId();
            SendMessage message = getSendMessage(foundApartments, user, chatId);
            try {
                if(message != null && !message.getChatId().isEmpty()) {
                    execute(message);
                    log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, id: {}", chatId);
                }
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.getMessage());
            }
        }
        userRepository.saveAll(subscribedUsers);
    }

    private static SendMessage getSendMessage(Pair<String, String> foundApartments, User user, Long chatId) {

        if (foundApartments == null || chatId == null) {
            return null;
        }

        String description = foundApartments.getLeft();
        String link = foundApartments.getRight();

        if (!isApartmentTypePresent(user, description) || Objects.equals(user.getApartmentLink(), link)) {
            return null;
        }

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("–ù–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞: " + description + "\n–°—Å—ã–ª–∫–∞: " + link);

        user.setApartmentLink(link);
        user.setApartmentDescription(description);

        return message;

    }

    private static boolean isApartmentTypePresent(User user, String description) {

        String apartmentTypeFromDB = user.getApartmentType();
        return apartmentTypeFromDB != null && apartmentTypeFromDB.contains(String.valueOf(description.charAt(0)));
    }

    private void setupApartmentMonitoringForm(Message msg) {

        if (msg == null) {
            return;
        }

        long chatId = msg.getChatId();

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId
        message.setText(CHOOSE_ROOM_COUNT); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        markupInline.setKeyboard(getRoomCountKeyboardMarkup());
        message.setReplyMarkup(markupInline);

        executeMessage(message);
    }

    private static List<List<InlineKeyboardButton>> getRoomCountKeyboardMarkup() {

        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        // –°—Ç—É–¥–∏—è
        rowsInline.add(createInlineButtonRow("–°—Ç—É–¥–∏—è", "–°—Ç—É–¥–∏—è"));

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 6
        for (int i = 1; i < 6; i++) { rowsInline.add(createInlineButtonRow(String.valueOf(i), String.valueOf(i))); }

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        rowsInline.add(createInlineButtonRow("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"));

        return rowsInline;
    }

    private static List<List<InlineKeyboardButton>> getRoomCountKeyboardMarkup(String apartmentTypeFromDB, boolean addFlag) {

        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        if (addFlag) {
            if (!apartmentTypeFromDB.contains("–°—Ç—É–¥–∏—è")) {
                rowsInline.add(createInlineButtonRow("–°—Ç—É–¥–∏—è", "–°—Ç—É–¥–∏—è"));
            }

            for (int i = 1; i < 6; i++) {
                if (!apartmentTypeFromDB.contains(String.valueOf(i))) {
                    rowsInline.add(createInlineButtonRow(String.valueOf(i), String.valueOf(i)));
                }
            }
        } else {
            if (apartmentTypeFromDB.contains("–°—Ç—É–¥–∏—è")) {
                rowsInline.add(createInlineButtonRow("–°—Ç—É–¥–∏—è", "–°—Ç—É–¥–∏—è"));
            }

            for (int i = 1; i < 6; i++) {
                if (apartmentTypeFromDB.contains(String.valueOf(i))) {
                    rowsInline.add(createInlineButtonRow(String.valueOf(i), String.valueOf(i)));
                }
            }
        }

        rowsInline.add(createInlineButtonRow("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"));

        return rowsInline;
    }

    private static List<InlineKeyboardButton> createInlineButtonRow(String buttonText, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(buttonText);
        button.setCallbackData(ROOM_BUTTON + callbackData);

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(button);

        return row;
    }

    private void addType(Message msg) {

        long chatId = msg.getChatId();

        if(isUserInDB(msg)) {


            Optional<User> optionalUser = userRepository.findById(chatId);
            if (optionalUser.isPresent()) {
                User user = optionalUser.get();
                String apartmentTypeFromDB = user.getApartmentType();

                prepareAndSendMessageWithReplyKeyboard(chatId, TEXT_ADD_TYPE, apartmentTypeFromDB, true);
            }
        } else {
            prepareAndSendMessage(chatId, TEXT_ADD_TYPE_WRONG);
            log.warn("User try /addtype but unsubscribe: {}", msg.getChat().getFirstName() + " " + msg.getChat().getLastName());
        }
    }

    private void removeType(Message msg) {
        long chatId = msg.getChatId();

        if (isUserInDB(msg)) {
            Optional<User> optionalUser = userRepository.findById(chatId);
            if (optionalUser.isPresent()) {
                User user = optionalUser.get();
                String apartmentTypeFromDB = user.getApartmentType();

                prepareAndSendMessageWithReplyKeyboard(chatId, TEXT_REMOVE_TYPE, apartmentTypeFromDB, false);
            }
        } else {
            prepareAndSendMessage(chatId, TEXT_ADD_TYPE_WRONG);
            log.warn("User try /removetype but unsubscribe: {}", msg.getChat().getFirstName() + " " + msg.getChat().getLastName());
        }
    }

    public TelegramBot(UserRepository userRepository, BotConfig config) {
        this.userRepository = userRepository;
        this.config = config;
        initializeCommands();
    }

    private void initializeCommands() {
        List<BotCommand> listOfCommands = List.of(
                new BotCommand("/start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                new BotCommand("/subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"),
                new BotCommand("/delete", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ"),
                new BotCommand("/help", "–ü–æ–º–æ—â—å –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º"),
                new BotCommand("/addtype", "–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã"),
                new BotCommand("/removetype", "–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã")
        );
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: " + e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (isTextMessage(update)) {
            try {
                processTextMessage(update);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        } else if (isCallbackQuery(update)) {
            processCallbackQuery(update);
        }
    }

    private boolean isTextMessage(Update update) {
        return update.hasMessage() && update.getMessage().hasText();
    }

    private boolean isCallbackQuery(Update update) {
        return update.hasCallbackQuery();
    }

    private void processTextMessage(Update update) throws IOException {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        if (messageText.startsWith("/send") && config.getOwnerId() == chatId) {
            processSendCommand(messageText);
        } else {
            processUserCommand(messageText, chatId, update);
        }
    }

    private void processSendCommand(String messageText) {
        var textToSend = messageText.substring(messageText.indexOf(" ")); // –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ /send
        var users = userRepository.findAll(); // –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (User user : users) {
            prepareAndSendMessage(user.getChatId(), textToSend); // –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –ë–î –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
    }

    private void processUserCommand(String messageText, long chatId, Update update) throws IOException {
        switch (messageText) {
            case "/start":
                startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                break;
            case "/subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è":
                register(update.getMessage());
                break;
            case "/delete", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è":
                delete(update.getMessage());
                break;
            case "/addtype":
                addType(update.getMessage());
                break;
            case "/removetype":
                removeType(update.getMessage());
                break;
            case "–í—ã–≤–µ—Å—Ç–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ":
                showMyData(update.getMessage());
                break;
            case "/help":
                prepareAndSendMessage(chatId, HELP_TEXT);
                break;
            default:
                prepareAndSendMessage(chatId, COMMAND_NOT_EXIST_TEXT);
        }
    }

    private void processCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long messageId = update.getCallbackQuery().getMessage().getMessageId();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        String messageText = update.getCallbackQuery().getMessage().getText();

        switch (callbackData) {
            case YES_BUTTON -> processYesButton(update, messageText);
            case NO_BUTTON -> processNoButton(messageText, chatId, messageId);
            case "ROOM_BUTTON_–°—Ç—É–¥–∏—è", "ROOM_BUTTON_1", "ROOM_BUTTON_2", "ROOM_BUTTON_3", "ROOM_BUTTON_4", "ROOM_BUTTON_5", "ROOM_BUTTON_–ó–∞–≤–µ—Ä—à–∏—Ç—å" -> processRoomCountButton(update);
        }
    }

    private void processYesButton(Update update, String messageText) {

        if (messageText.equals(SUBSCRIBE_QUESTION_TEXT)) {
            registerUser(update.getCallbackQuery().getMessage());
        } else if (messageText.equals(UNSUBSCRIBE_QUESTION_TEXT)) {
            deleteUserData(update.getCallbackQuery().getMessage());
        }
    }

    private void processNoButton(String messageText, long chatId, long messageId) {

        if (messageText.equals(SUBSCRIBE_QUESTION_TEXT)) {
            executeEditMessageText(SUBSCRIBE_FALSE_TEXT, chatId, messageId);
        } else if (messageText.equals(UNSUBSCRIBE_QUESTION_TEXT)) {
            executeEditMessageText(UNSUBSCRIBE_FALSE_TEXT, chatId, messageId);
        }
    }

    private void processRoomCountButton(Update update) {
        Set<String> validApartmentTypes = new HashSet<>(Arrays.asList("–°—Ç—É–¥–∏—è", "1", "2", "3", "4", "5"));
        Optional<User> optionalUser = userRepository.findById(update.getCallbackQuery().getMessage().getChatId());

        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            String roomNumberButton = update.getCallbackQuery().getData();
            String messageText = update.getCallbackQuery().getMessage().getText();

            try {
                String apartmentType = extractRoomType(roomNumberButton);
                assert apartmentType != null;

                if (messageText.equals(TEXT_REMOVE_TYPE)) {

                    if (apartmentType.equals("–ó–∞–≤–µ—Ä—à–∏—Ç—å")) {
                        executeEditMessageText("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", user.getChatId(), update.getCallbackQuery().getMessage().getMessageId());
                        log.info("Apartment's type changed: " + user);
                    } else {
                        String newApartmentType = getNewApartmentType(user, apartmentType);
                        user.setApartmentType(newApartmentType);

                        String newApartmentTypeFromDB = user.getApartmentType();
                        executeEditMessageTextWithReplyKeyboard(newApartmentTypeFromDB, TEXT_REMOVE_TYPE, user.getChatId(), update.getCallbackQuery().getMessage().getMessageId(), false);

                    }
                    userRepository.save(user);

                } else {
                    if (apartmentType.equals("–ó–∞–≤–µ—Ä—à–∏—Ç—å")) {
                        executeEditMessageText("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!", user.getChatId(), update.getCallbackQuery().getMessage().getMessageId());
                        log.info("Apartment's type saved: " + user);
                    } else if (validApartmentTypes.contains(apartmentType)) {

                        if (user.getApartmentType() == null) {
                            user.setApartmentType(apartmentType);
                        } else {
                            String apartmentTypeFromDB = user.getApartmentType();
                            String newApartmentType = String.join(",", apartmentTypeFromDB, apartmentType);
                            user.setApartmentType(newApartmentType);
                        }

                        String apartmentTypeFromDB = user.getApartmentType();
                        executeEditMessageTextWithReplyKeyboard(apartmentTypeFromDB, CHOOSE_ROOM_COUNT, user.getChatId(), update.getCallbackQuery().getMessage().getMessageId(), true);

                    } else {
                        log.error("Unsupported room number button: {}", roomNumberButton);
                    }

                    userRepository.save(user);
                }

            } catch (DataAccessException e) {
                log.error("Error saving apartment's type for user: {}", e.getMessage());
            }
        }
    }

    private static String getNewApartmentType(User user, String apartmentType) {
        String apartmentTypeFromDB = user.getApartmentType();
        String newApartmentType;

        if (apartmentTypeFromDB.charAt(apartmentTypeFromDB.length() - 1) == apartmentType.charAt(0)) {
            newApartmentType = apartmentTypeFromDB.replace(apartmentType, "");

        } else {
            newApartmentType = apartmentTypeFromDB.replace(apartmentType + ",", "");
        }
        return newApartmentType;
    }

    private String extractRoomType(String roomNumberButton) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ callbackData
        String[] parts = roomNumberButton.split("_");
        if (parts.length == 3 && parts[0].equals("ROOM") && parts[1].equals("BUTTON")) {
            return parts[2];
        }
        return null;
    }

    private void registerUser(Message msg) {

        long chatId = msg.getChatId();
        var chat = msg.getChat();

        User user = new User();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setChatId(chatId);
        user.setFirstName(chat.getFirstName());
        user.setLastName(chat.getLastName());
        user.setUserName(chat.getUserName());
        user.setRegisteredAt(new Timestamp(System.currentTimeMillis()));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            userRepository.save(user);
            executeEditMessageText(SUBSCRIBE_TRUE_TEXT, chatId, msg.getMessageId());
            log.info("User saved: {}", user);

            setupApartmentMonitoringForm(msg);
        } catch (DataAccessException e) {
            log.error("Error saving user to the database: {}", e.getMessage());
        }
    }

    private boolean isUserInDB(Message msg) { return userRepository.findById(msg.getChatId()).isPresent(); }

    private void register(Message msg) {

        if (!isUserInDB(msg)) {
            long chatId = msg.getChatId();
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId
            message.setText("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è


            // –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            InlineKeyboardMarkup markupInline = getYesNoKeyboardMarkup();
            message.setReplyMarkup(markupInline);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            executeMessage(message);
        } else {
            prepareAndSendMessage(msg.getChatId(), USER_ALREADY_REGISTERED_TEXT);
            log.warn("User already exist: {}", msg.getChat().getFirstName() + " " + msg.getChat().getLastName());
        }
    }

    private static InlineKeyboardMarkup getYesNoKeyboardMarkup() {
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        List<InlineKeyboardButton> rowInline = new ArrayList<>();
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞"
        var yesButton = new InlineKeyboardButton();
        yesButton.setText("–î–∞");
        yesButton.setCallbackData(YES_BUTTON);
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ—Ç"
        var noButton = new InlineKeyboardButton();
        noButton.setText("–ù–µ—Ç");
        noButton.setCallbackData(NO_BUTTON);
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        rowInline.add(yesButton);
        rowInline.add(noButton);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        rowsInline.add(rowInline);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        markupInline.setKeyboard(rowsInline);
        return markupInline;
    }

    private void deleteUserData(Message msg) {

        Optional<User> optionalUser = userRepository.findById(msg.getChatId());
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º chatId –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if(optionalUser.isPresent()) {
            User user = optionalUser.get();
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try {
                userRepository.delete(user);
                executeEditMessageText(UNSUBSCRIBE_TRUE_TEXT, msg.getChatId(), msg.getMessageId());
                log.info("User deleted: " + user);
            } catch (DataAccessException e) {
                log.error("Error delete user from the database: {}", e.getMessage());
            }
        }
    }

    private void delete(Message msg) {

        long chatId = msg.getChatId();
        if (isUserInDB(msg)) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId)); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId
            message.setText("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            // –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

            InlineKeyboardMarkup markupInline = getYesNoKeyboardMarkup();
            message.setReplyMarkup(markupInline);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            executeMessage(message);
        } else {
            prepareAndSendMessage(msg.getChatId(), NOT_SUBSCRIBED_WANT_TO_UNSUBSCRIBE_TEXT);
            log.warn("User not found for chatId: " + chatId);
        }
    }

    private void showMyData(Message msg) {

        long chatId = msg.getChatId();
        Optional<User> optionalUser = userRepository.findById(chatId);

        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prepareAndSendMessage(chatId, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" + user.getUserDataDB());
        } else {

            prepareAndSendMessage(chatId, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞!");
            log.warn("User not found for chatId: {}", chatId);
        }
    }

    private void executeEditMessageText(String text, long chatId, long messageId) {
        EditMessageText message = new EditMessageText(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId, —Ç–µ–∫—Å—Ç –∏ messageId –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);

        try {
            execute(message); // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        catch (TelegramApiException e) {
            log.error(ERROR_TEXT + e.getMessage()); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        }
    }

    private void executeEditMessageTextWithReplyKeyboard(String apartmentTypeFromDB, String text, long chatId, long messageId, boolean addFlag) {
        EditMessageText message = new EditMessageText(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId, —Ç–µ–∫—Å—Ç –∏ messageId –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);
        
        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = getRoomCountKeyboardMarkup(apartmentTypeFromDB, addFlag);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);
        try {
            execute(message); // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        catch (TelegramApiException e) {
            log.error(ERROR_TEXT + e.getMessage()); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        }
    }

    private void executeMessage(SendMessage message) {
        try {
            execute(message); // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        catch (TelegramApiException e) {
            log.error(ERROR_TEXT + e.getMessage()); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        }
    }

    private void startCommandReceived(long chatId, String name) {
        String answer = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + name + "! –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å."; // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        log.info("Replied to user " + name); // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sendMessage(chatId, answer); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        List<KeyboardRow> keyboardRows = getKeyboardRows();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboardMarkup.setKeyboard(keyboardRows);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message.setReplyMarkup(keyboardMarkup);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        executeMessage(message);
    }

    private static List<KeyboardRow> getKeyboardRows() {
        List<KeyboardRow> keyboardRows = new ArrayList<>();
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        KeyboardRow row = new KeyboardRow();
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        row.add("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è");
        row.add("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è");
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboardRows.add(row);
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        row = new KeyboardRow();
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
        row.add("–í—ã–≤–µ—Å—Ç–∏ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ");
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboardRows.add(row);
        return keyboardRows;
    }

    private void prepareAndSendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        executeMessage(message); // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    private void prepareAndSendMessageWithReplyKeyboard(long chatId, String textToSend, String apartmentTypeFromDB, boolean addFlag) {
        SendMessage message = new SendMessage(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º chatId –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = getRoomCountKeyboardMarkup(apartmentTypeFromDB, addFlag);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);
        try {
            execute(message); // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        catch (TelegramApiException e) {
            log.error(ERROR_TEXT + e.getMessage()); // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        }
    }
}
